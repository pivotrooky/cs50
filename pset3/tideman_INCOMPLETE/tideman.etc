VOTE: -get votes
TALLY: -check for pairs of preferences
SORT: pairs according to strength
LOCK: add pairs to graph, if they don't create cycles
CHECK: for source of graph = one who wouldn't lose in runoff
PRINT: that candidate (winner)



!RECORD_PREFERENCES: SOLUCIONAR!
!ADD_PAIRS: SOLUCIONAR LOOP!
!SORT_PAIRS
!LOCK PAIRS
!PRINT


Complete the record_preferences function.

The function is called once for each voter, and takes as argument the ranks array, (recall that ranks[i] is the voter’s ith preference, where ranks[0] is the first preference).

The function should update the global preferences array to add the current voter’s preferences. Recall that preferences[i][j] should represent the number of voters who prefer candidate i
over candidate j.

You may assume that every voter will rank each of the candidates.

Complete the add_pairs function.
The function should add all pairs of candidates where one candidate is preferred to the pairs array. A pair of candidates who are tied (one is not preferred over the other)
should not be added to the array.
The function should update the global variable pair_count to be the number of pairs of candidates. (The pairs should thus all be stored between pairs[0] and pairs[pair_count - 1], inclusive).

Complete the sort_pairs function.
The function should sort the pairs array in decreasing order of strength of victory, where strength of victory is defined to be the number of voters who prefer the preferred candidate.
If multiple pairs have the same strength of victory, you may assume that the order does not matter.

Complete the lock_pairs function.
The function should create the locked graph, adding all edges in decreasing order of victory strength so long as the edge would not create a cycle.

Complete the print_winner function.
The function should print out the name of the candidate who is the source of the graph. You may assume there will not be more than one source.